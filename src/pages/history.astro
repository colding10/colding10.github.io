---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import Layout from '@/layouts/Layout.astro'

type CTFEntry = {
  name: string
  url: string
  team?: string // Team name (optional)
  placement: string
  description?: string // Quick description/notes (optional)
  month: number // 1-12
  year: number
}

const MONTHS = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
]

// Simple, easy-to-extend data array.
// Add new results by pushing new objects here.
const entries: CTFEntry[] = [
  {
    name: 'UTCTF 2025',
    url: 'https://ctftime.org/event/2641',
    description:
      'was on a trip playing on bus/hotel. first started maining rev',
    placement: '151th',
    month: 3,
    year: 2025,
  },
  {
    name: 'PicoCTF 2025',
    url: 'https://play.picoctf.org/events/74/scoreboards#4878',
    description: 'im still very new to ctf but solved some challs',
    placement: '29th (hs)',
    month: 3,
    year: 2025,
  },
  {
    name: 'PwnMe CTF Quals 2025',
    url: 'https://ctftime.org/event/2658',
    description: 'gave up early (common theme)',
    placement: '219th',
    month: 2,
    year: 2025,
  },
  {
    name: 'Garden State CTF',
    url: 'https://www.cyber.nj.gov/Home/Components/News/News/1598/186',
    description: 'my first ever ctf (thanks @tien for recruiting me)',
    placement: '2nd',
    month: 2,
    year: 2025,
  },
]

// Sort newest first
const sorted = [...entries].sort((a, b) => b.year - a.year || b.month - a.month)

// Group by month-year for monthly markers on the timeline
type Group = { year: number; month: number; items: CTFEntry[] }

const groupsMap = new Map<string, Group>()
for (const e of sorted) {
  const key = `${e.year}-${String(e.month).padStart(2, '0')}`
  if (!groupsMap.has(key))
    groupsMap.set(key, { year: e.year, month: e.month, items: [] })
  groupsMap.get(key)!.items.push(e)
}
const groups = Array.from(groupsMap.values()).sort(
  (a, b) => b.year - a.year || b.month - a.month,
)
---

<Layout class="max-w-3xl">
  <PageHead
    slot="head"
    title="CTF History"
    description="Timeline of CTF competitions and results"
  />
  <Breadcrumbs items={[{ label: 'History', icon: 'lucide:calendar' }]} />

  <section aria-labelledby="ctf-history-title" class="font-mono">
    <h1 id="ctf-history-title" class="mt-5 text-3xl font-bold">CTF History</h1>
    <p class="text-muted-foreground mt-2">
      Competition results over time, newest first.
    </p>

    <div class="relative mt-8">
      <div class="bg-border absolute top-0 bottom-0 left-4 w-px"></div>

      <div class="space-y-10">
        {
          groups.map((group) => (
            <div>
              <div class="relative pl-10">
                <div class="bg-primary ring-background absolute top-2 left-4 h-3 w-3 rounded-full ring-2" />
                <p class="text-muted-foreground text-xs tracking-wider uppercase">
                  {MONTHS[group.month - 1]} {group.year}
                </p>
              </div>

              <ul class="mt-4 space-y-3">
                {group.items.map((e) => (
                  <li class="relative pl-10">
                    <div class="bg-accent ring-background absolute top-2 left-4 h-2 w-2 rounded-full ring-2" />
                    <div class="flex flex-wrap items-baseline gap-x-3 gap-y-1">
                      <a
                        href={e.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-primary font-medium hover:underline"
                      >
                        {e.name}
                      </a>

                      <span class="text-muted-foreground text-sm font-medium">
                        {e.placement}
                      </span>

                      {e.team && (
                        <span class="bg-secondary text-secondary-foreground rounded px-1.5 py-0.5 text-xs font-medium">
                          {e.team}
                        </span>
                      )}

                      {e.description && (
                        <span class="text-muted-foreground flex-shrink-0 text-sm italic">
                          â€” {e.description}
                        </span>
                      )}
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          ))
        }
      </div>

      <!-- Empty state message if no entries -->
      {
        groups.length === 0 && (
          <div class="py-12 text-center">
            <p class="text-muted-foreground">
              No CTF entries yet. Add some to the entries array!
            </p>
          </div>
        )
      }
    </div>
  </section>
</Layout>
